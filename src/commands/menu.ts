import { bot } from "../bot";
import menuByDate from "../data/menuByDate";
import moment from "moment";

// Types
import type { CommandExecute, CommandMeta } from "../@types/command";

export const execute: CommandExecute = async (message) => {
  const todayMenu = menuByDate.find(
    (item) => item.date === moment().format("DD.MM.YYYY")
  );

  const tomorrowMenu = menuByDate.find(
    (item) => item.date === moment().add(1, "days").format("DD.MM.YYYY")
  );

  const msg = await bot.sendMessage(
    message.chat.id,
    `üçΩÔ∏è Hangi g√ºn√ºn men√ºs√ºne bakmak istersiniz?`,
    {
      parse_mode: "Markdown",
      reply_markup: {
        force_reply: true,
      },
    }
  );

  await bot.sendMessage(message.chat.id, `Listeden bir g√ºn se√ßin:`, {
    parse_mode: "Markdown",
    disable_notification: true,
    reply_markup: {
      resize_keyboard: true,
      one_time_keyboard: true,
      keyboard: [
        [
          {
            text: "‚ñ∂Ô∏è Bug√ºn",
          },
          {
            text: "‚è© Yarƒ±n",
          },
        ],
        [
          ...menuByDate.slice(2, 5).map((item, index) => ({
            text: item.date,
          })),
        ],
      ],
    },
  });

  bot.onReplyToMessage(message.chat.id, msg.message_id, (newMsg) => {
    if (newMsg.text === "‚ñ∂Ô∏è Bug√ºn") {
      if (!todayMenu)
        bot.sendMessage(
          message.chat.id,
          "üçΩÔ∏è Bug√ºn i√ßin belirlenmi≈ü bir men√º yok."
        );
      else
        bot.sendMessage(
          message.chat.id,
          `üçΩÔ∏è *Bug√ºn√ºn men√ºs√º:*\n\n${todayMenu.menu
            .map((item, index) => `${getEmojiFromIndex(index)} ${item}`)
            .join("\n")}`,
          {
            parse_mode: "Markdown",
          }
        );
    } else if (newMsg.text === "‚è© Yarƒ±n") {
      if (!tomorrowMenu)
        bot.sendMessage(
          message.chat.id,
          "üçΩÔ∏è Yarƒ±n i√ßin belirlenmi≈ü bir men√º yok."
        );
      else
        bot.sendMessage(
          message.chat.id,
          `üçΩÔ∏è *Yarƒ±nƒ±n men√ºs√º:*\n\n${tomorrowMenu.menu
            .map((item, index) => `${getEmojiFromIndex(index)} ${item}`)
            .join("\n")}`,
          {
            parse_mode: "Markdown",
          }
        );
    } else {
      const menu = menuByDate.find((item) => item.date === newMsg.text);

      if (!menu)
        bot.sendMessage(
          message.chat.id,
          "üçΩÔ∏è Se√ßtiƒüiniz tarih i√ßin belirlenmi≈ü bir men√º yok."
        );
      else
        bot.sendMessage(
          message.chat.id,
          `üçΩÔ∏è *${menu.date} tarihli men√º:*\n\n${menu.menu
            .map((item, index) => `${getEmojiFromIndex(index)} ${item}`)
            .join("\n")}`,
          {
            parse_mode: "Markdown",
          }
        );
    }
  });
};

const getEmojiFromIndex = (index: number) => {
  if (index === 0) return "1Ô∏è‚É£";
  else if (index === 1) return "2Ô∏è‚É£";
  else if (index === 2) return "3Ô∏è‚É£";
  else if (index === 3) return "4Ô∏è‚É£";
  else if (index === 4) return "5Ô∏è‚É£";

  return "üçï";
};

export const meta: CommandMeta = {
  command: "menu",
  description: "Yemek men√ºs√ºn√º g√∂nderir.",
};
